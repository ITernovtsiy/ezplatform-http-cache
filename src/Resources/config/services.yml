parameters:
    ezplatform.http_cache.controller.invalidatetoken.class: EzSystems\PlatformHttpCacheBundle\Controller\InvalidateTokenController
    ezplatform.http_cache.listener.vary_header.class: EzSystems\PlatformHttpCacheBundle\EventListener\ConditionallyRemoveVaryHeaderListener

services:
    ezplatform.http_cache.proxy_client.varnish.factory:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\VarnishProxyClientFactory
        arguments: ['@ezpublish.config.resolver', '@ezpublish.config.dynamic_setting.parser', '%fos_http_cache.proxy_client.varnish.class%']

    ezplatform.http_cache.purge_client:
        alias: ezplatform.http_cache.purge_client_decorator

    ezplatform.http_cache.purge_client_decorator:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\RepositoryPrefixDecorator
        arguments: ['@ezplatform.http_cache.purge_client_internal']
        # Use setter to avoid SiteAccess system creating two instances of handler before and after SiteAccess is set
        calls:
            - [setRepositoryId, [$repository$]]

    ezplatform.http_cache.purge_client_internal:
        alias: ezplatform.http_cache.purge_client.local

    ezplatform.http_cache.purge_client.varnish:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\VarnishPurgeClient
        arguments:
            - '@ezplatform.http_cache.cache_manager'
            - '@ezpublish.config.resolver'
        tags:
            - {name: ezplatform.http_cache.purge_client, purge_type: http}
            - {name: ezplatform.http_cache.purge_client, purge_type: varnish}

    ezplatform.http_cache.purge_client.local:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\LocalPurgeClient
        arguments: ['@ezplatform.http_cache.store']
        tags:
            - {name: ezplatform.http_cache.purge_client, purge_type: local}

    ezplatform.http_cache.store:
        alias: ezplatform.http_cache.tag_aware_store

    ezplatform.http_cache.tag_aware_store:
        class: EzSystems\PlatformHttpCacheBundle\Proxy\TagAwareStore
        arguments: ['%ezplatform.http_cache.store.root%']

    ezplatform.http_cache.cache_manager:
        class: EzSystems\PlatformHttpCacheBundle\CacheManager
        arguments:
            - '@fos_http_cache.default_proxy_client'
            - '@router'
            - '@ezplatform.http_cache.purge_client'
        calls:
            - ['setEventDispatcher', ['@?event_dispatcher']]
            - ['setGenerateUrlType', ['%fos_http_cache.cache_manager.generate_url_type%']]

    ezplatform.http_cache.symfony_response_tagger:
        class: EzSystems\PlatformHttpCacheBundle\SymfonyResponseTagger
        parent: fos_http_cache.http.symfony_response_tagger
        arguments:
            $tagsHeader: '%ezplatform.http_cache.tags.header%'
        calls:
            - ['addTags', [['ez-all']]]

    ezplatform.http_cache.user_context_provider.role_identify:
        class: EzSystems\PlatformHttpCacheBundle\ContextProvider\RoleIdentify
        arguments: ["@ezpublish.api.repository"]
        tags:
            - { name: fos_http_cache.user_context_provider }

    ezplatform.http_cache.controller.invalidatetoken:
        class: "%ezplatform.http_cache.controller.invalidatetoken.class%"
        arguments:
         - '@ezpublish.config.resolver'
         - "%ezplatform.http_cache.invalidate_token.ttl%"
         - "@ezplatform.http_cache.symfony_response_tagger"

    ezplatform.http_cache.listener.vary_header:
        class: "%ezplatform.http_cache.listener.vary_header.class%"
        arguments:
         - "%ezplatform.http_cache.no_vary.routes%"
        tags:
            - { name: kernel.event_subscriber, priority: -100 }
